<?hh // strict
namespace foo\bar;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: example1.proto

newtype XXX_AEnum1_t as int = int;
class AEnum1 {
  const XXX_AEnum1_t A = 0;
  const XXX_AEnum1_t B = 2;
  private static dict<int, string> $itos = dict[
    0 => 'A',
    2 => 'B',
  ];
  public static function NumbersToNames(): dict<int, string> {
    return self::$itos;
  }
  public static function FromInt(int $i): XXX_AEnum1_t {
    return $i;
  }
}

// message example2
class example2 implements \Protobuf\Message {
  // field aint32 = 1
  public int $aint32;

  public function __construct() {
    $this->aint32 = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->aint32 = $d->readVarint32Signed();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->aint32 !== 0) {
      $e->writeTag(1, 0);
      $e->writeVarint($this->aint32);
    }
  }
  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeInt32('aint32', 'aint32', $this->aint32);
  }
}

newtype XXX_example1_AEnum2_t as int = int;
class example1_AEnum2 {
  const XXX_example1_AEnum2_t C = 0;
  const XXX_example1_AEnum2_t D = 10;
  private static dict<int, string> $itos = dict[
    0 => 'C',
    10 => 'D',
  ];
  public static function NumbersToNames(): dict<int, string> {
    return self::$itos;
  }
  public static function FromInt(int $i): XXX_example1_AEnum2_t {
    return $i;
  }
}

newtype XXX_example1_aoneof_t = int;
class example1_aoneof {
  const XXX_example1_aoneof_t NONE = 0;
  const XXX_example1_aoneof_t oostring = 60;
  const XXX_example1_aoneof_t ooint = 61;
}

// message example2
class example1_example2 implements \Protobuf\Message {
  // field astring = 1
  public string $astring;

  public function __construct() {
    $this->astring = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->astring = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->astring !== '') {
      $e->writeTag(1, 2);
      $e->writeString($this->astring);
    }
  }
  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('astring', 'astring', $this->astring);
  }
}

// message AmapEntry
class example1_AmapEntry implements \Protobuf\Message {
  // field key = 1
  public string $key;
  // field value = 2
  public string $value;

  public function __construct() {
    $this->key = '';
    $this->value = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->key = $d->readString();
          break;
        case 2:
          $this->value = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->key !== '') {
      $e->writeTag(1, 2);
      $e->writeString($this->key);
    }
    if ($this->value !== '') {
      $e->writeTag(2, 2);
      $e->writeString($this->value);
    }
  }
  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('key', 'key', $this->key);
    $e->writeString('value', 'value', $this->value);
  }
}

// message Amap2Entry
class example1_Amap2Entry implements \Protobuf\Message {
  // field key = 1
  public string $key;
  // field value = 2
  public ?\fiz\baz\example2 $value;

  public function __construct() {
    $this->key = '';
    $this->value = null;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->key = $d->readString();
          break;
        case 2:
          if ($this->value == null) {
            $this->value = new \fiz\baz\example2();
          }
          $this->value->MergeFrom($d->readDecoder());
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->key !== '') {
      $e->writeTag(1, 2);
      $e->writeString($this->key);
    }
    $msg = $this->value;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 2);
    }
  }
  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('key', 'key', $this->key);
    $e->writeMessage('value', 'value', $this->value);
  }
}

// message example1
class example1 implements \Protobuf\Message {
  // field adouble = 1
  public float $adouble;
  // field afloat = 2
  public float $afloat;
  // field aint32 = 3
  public int $aint32;
  // field aint64 = 4
  public int $aint64;
  // field auint32 = 5
  public int $auint32;
  // field auint64 = 6
  public int $auint64;
  // field asint32 = 7
  public int $asint32;
  // field asint64 = 8
  public int $asint64;
  // field afixed32 = 9
  public int $afixed32;
  // field afixed64 = 10
  public int $afixed64;
  // field asfixed32 = 11
  public int $asfixed32;
  // field asfixed64 = 12
  public int $asfixed64;
  // field abool = 13
  public bool $abool;
  // field astring = 14
  public string $astring;
  // field abytes = 15
  public string $abytes;
  // field aenum1 = 20
  public \foo\bar\XXX_AEnum1_t $aenum1;
  // field aenum2 = 21
  public \foo\bar\XXX_example1_AEnum2_t $aenum2;
  // field aenum22 = 22
  public \fiz\baz\XXX_AEnum2_t $aenum22;
  // field manystring = 30
  public vec<string> $manystring;
  // field manyint64 = 31
  public vec<int> $manyint64;
  // field aexample2 = 40
  public ?\foo\bar\example1_example2 $aexample2;
  // field aexample22 = 41
  public ?\foo\bar\example2 $aexample22;
  // field aexample23 = 42
  public ?\fiz\baz\example2 $aexample23;
  // field amap = 51
  public dict<string, string> $amap;
  // field amap2 = 52
  public dict<string, ?\fiz\baz\example2> $amap2;
  // field outoforder = 49
  public int $outoforder;
  // field oostring = 60
  public string $oostring;
  // field ooint = 61
  public int $ooint;

  public function __construct() {
    $this->adouble = 0.0;
    $this->afloat = 0.0;
    $this->aint32 = 0;
    $this->aint64 = 0;
    $this->auint32 = 0;
    $this->auint64 = 0;
    $this->asint32 = 0;
    $this->asint64 = 0;
    $this->afixed32 = 0;
    $this->afixed64 = 0;
    $this->asfixed32 = 0;
    $this->asfixed64 = 0;
    $this->abool = false;
    $this->astring = '';
    $this->abytes = '';
    $this->aenum1 = \foo\bar\AEnum1::A;
    $this->aenum2 = \foo\bar\example1_AEnum2::C;
    $this->aenum22 = \fiz\baz\AEnum2::Z;
    $this->manystring = vec[];
    $this->manyint64 = vec[];
    $this->aexample2 = null;
    $this->aexample22 = null;
    $this->aexample23 = null;
    $this->amap = dict[];
    $this->amap2 = dict[];
    $this->outoforder = 0;
    $this->oostring = '';
    $this->ooint = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->adouble = $d->readDouble();
          break;
        case 2:
          $this->afloat = $d->readFloat();
          break;
        case 3:
          $this->aint32 = $d->readVarint32Signed();
          break;
        case 4:
          $this->aint64 = $d->readVarint();
          break;
        case 5:
          $this->auint32 = $d->readVarint32();
          break;
        case 6:
          $this->auint64 = $d->readVarint32();
          break;
        case 7:
          $this->asint32 = $d->readVarintZigZag32();
          break;
        case 8:
          $this->asint64 = $d->readVarintZigZag64();
          break;
        case 9:
          $this->afixed32 = $d->readLittleEndianInt32Unsigned();
          break;
        case 10:
          $this->afixed64 = $d->readLittleEndianInt64();
          break;
        case 11:
          $this->asfixed32 = $d->readLittleEndianInt32Signed();
          break;
        case 12:
          $this->asfixed64 = $d->readLittleEndianInt64();
          break;
        case 13:
          $this->abool = $d->readBool();
          break;
        case 14:
          $this->astring = $d->readString();
          break;
        case 15:
          $this->abytes = $d->readString();
          break;
        case 20:
          $this->aenum1 = \foo\bar\AEnum1::FromInt($d->readVarint());
          break;
        case 21:
          $this->aenum2 = \foo\bar\example1_AEnum2::FromInt($d->readVarint());
          break;
        case 22:
          $this->aenum22 = \fiz\baz\AEnum2::FromInt($d->readVarint());
          break;
        case 30:
          $this->manystring []= $d->readString();
          break;
        case 31:
          if ($wt == 2) {
            $packed = $d->readDecoder();
            while (!$packed->isEOF()) {
              $this->manyint64 []= $packed->readVarint();
            }
          } else {
            $this->manyint64 []= $d->readVarint();
          }
          break;
        case 40:
          if ($this->aexample2 == null) {
            $this->aexample2 = new \foo\bar\example1_example2();
          }
          $this->aexample2->MergeFrom($d->readDecoder());
          break;
        case 41:
          if ($this->aexample22 == null) {
            $this->aexample22 = new \foo\bar\example2();
          }
          $this->aexample22->MergeFrom($d->readDecoder());
          break;
        case 42:
          if ($this->aexample23 == null) {
            $this->aexample23 = new \fiz\baz\example2();
          }
          $this->aexample23->MergeFrom($d->readDecoder());
          break;
        case 49:
          $this->outoforder = $d->readVarint();
          break;
        case 51:
          $obj = new \foo\bar\example1_AmapEntry();
          $obj->MergeFrom($d->readDecoder());
          $this->amap[$obj->key] = $obj->value;
          break;
        case 52:
          $obj = new \foo\bar\example1_Amap2Entry();
          $obj->MergeFrom($d->readDecoder());
          $this->amap2[$obj->key] = $obj->value;
          break;
        case 60:
          $this->oostring = $d->readString();
          break;
        case 61:
          $this->ooint = $d->readVarint32Signed();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->adouble !== 0.0) {
      $e->writeTag(1, 1);
      $e->writeDouble($this->adouble);
    }
    if ($this->afloat !== 0.0) {
      $e->writeTag(2, 5);
      $e->writeFloat($this->afloat);
    }
    if ($this->aint32 !== 0) {
      $e->writeTag(3, 0);
      $e->writeVarint($this->aint32);
    }
    if ($this->aint64 !== 0) {
      $e->writeTag(4, 0);
      $e->writeVarint($this->aint64);
    }
    if ($this->auint32 !== 0) {
      $e->writeTag(5, 0);
      $e->writeVarint($this->auint32);
    }
    if ($this->auint64 !== 0) {
      $e->writeTag(6, 0);
      $e->writeVarint($this->auint64);
    }
    if ($this->asint32 !== 0) {
      $e->writeTag(7, 0);
      $e->writeVarintZigZag32($this->asint32);
    }
    if ($this->asint64 !== 0) {
      $e->writeTag(8, 0);
      $e->writeVarintZigZag64($this->asint64);
    }
    if ($this->afixed32 !== 0) {
      $e->writeTag(9, 5);
      $e->writeLittleEndianInt32Unsigned($this->afixed32);
    }
    if ($this->afixed64 !== 0) {
      $e->writeTag(10, 1);
      $e->writeLittleEndianInt64($this->afixed64);
    }
    if ($this->asfixed32 !== 0) {
      $e->writeTag(11, 5);
      $e->writeLittleEndianInt32Signed($this->asfixed32);
    }
    if ($this->asfixed64 !== 0) {
      $e->writeTag(12, 1);
      $e->writeLittleEndianInt64($this->asfixed64);
    }
    if ($this->abool !== false) {
      $e->writeTag(13, 0);
      $e->writeBool($this->abool);
    }
    if ($this->astring !== '') {
      $e->writeTag(14, 2);
      $e->writeString($this->astring);
    }
    if ($this->abytes !== '') {
      $e->writeTag(15, 2);
      $e->writeString($this->abytes);
    }
    if ($this->aenum1 !== \foo\bar\AEnum1::A) {
      $e->writeTag(20, 0);
      $e->writeVarint($this->aenum1);
    }
    if ($this->aenum2 !== \foo\bar\example1_AEnum2::C) {
      $e->writeTag(21, 0);
      $e->writeVarint($this->aenum2);
    }
    if ($this->aenum22 !== \fiz\baz\AEnum2::Z) {
      $e->writeTag(22, 0);
      $e->writeVarint($this->aenum22);
    }
    foreach ($this->manystring as $elem) {
      $e->writeTag(30, 2);
      $e->writeString($elem);
    }
    $packed = new \Protobuf\Internal\Encoder();
    foreach ($this->manyint64 as $elem) {
      $packed->writeVarint($elem);
    }
    $e->writeEncoder($packed, 31);
    $msg = $this->aexample2;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 40);
    }
    $msg = $this->aexample22;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 41);
    }
    $msg = $this->aexample23;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 42);
    }
    if ($this->outoforder !== 0) {
      $e->writeTag(49, 0);
      $e->writeVarint($this->outoforder);
    }
    foreach ($this->amap as $k => $v) {
      $obj = new \foo\bar\example1_AmapEntry();
      $obj->key = $k;
      $obj->value = $v;
      $nested = new \Protobuf\Internal\Encoder();
      $obj->WriteTo($nested);
      $e->writeEncoder($nested, 51);
    }
    foreach ($this->amap2 as $k => $v) {
      $obj = new \foo\bar\example1_Amap2Entry();
      $obj->key = $k;
      $obj->value = $v;
      $nested = new \Protobuf\Internal\Encoder();
      $obj->WriteTo($nested);
      $e->writeEncoder($nested, 52);
    }
    if ($this->oostring !== '') {
      $e->writeTag(60, 2);
      $e->writeString($this->oostring);
    }
    if ($this->ooint !== 0) {
      $e->writeTag(61, 0);
      $e->writeVarint($this->ooint);
    }
  }
  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeFloat('adouble', 'adouble', $this->adouble);
    $e->writeFloat('afloat', 'afloat', $this->afloat);
    $e->writeInt32('aint32', 'aint32', $this->aint32);
    $e->writeInt64Signed('aint64', 'aint64', $this->aint64);
    $e->writeInt32('auint32', 'auint32', $this->auint32);
    $e->writeInt32('auint64', 'auint64', $this->auint64);
    $e->writeInt32('asint32', 'asint32', $this->asint32);
    $e->writeInt64Signed('asint64', 'asint64', $this->asint64);
    $e->writeInt32('afixed32', 'afixed32', $this->afixed32);
    $e->writeInt64Unsigned('afixed64', 'afixed64', $this->afixed64);
    $e->writeInt32('asfixed32', 'asfixed32', $this->asfixed32);
    $e->writeInt64Signed('asfixed64', 'asfixed64', $this->asfixed64);
    $e->writeBool('abool', 'abool', $this->abool);
    $e->writeString('astring', 'astring', $this->astring);
    $e->writeString('abytes', 'abytes', $this->abytes);
    $e->writeEnum('aenum1', 'aenum1', \foo\bar\AEnum1::NumbersToNames(), $this->aenum1);
    $e->writeEnum('aenum2', 'aenum2', \foo\bar\example1_AEnum2::NumbersToNames(), $this->aenum2);
    $e->writeEnum('aenum22', 'aenum22', \fiz\baz\AEnum2::NumbersToNames(), $this->aenum22);
    $e->writePrimitiveList('manystring', 'manystring', $this->manystring);
    $e->writeInt64SignedList('manyint64', 'manyint64', $this->manyint64);
    $e->writeMessage('aexample2', 'aexample2', $this->aexample2);
    $e->writeMessage('aexample22', 'aexample22', $this->aexample22);
    $e->writeMessage('aexample23', 'aexample23', $this->aexample23);
    $e->writeInt64Signed('outoforder', 'outoforder', $this->outoforder);
    $e->writePrimitiveMap('amap', 'amap', $this->amap);
    $e->writeMessageMap('amap2', 'amap2', $this->amap2);
    $e->writeString('oostring', 'oostring', $this->oostring);
    $e->writeInt32('ooint', 'ooint', $this->ooint);
  }

  public function oneof_aoneof(): XXX_example1_aoneof_t {
    if ($this->oostring != '') {
      return example1_aoneof::oostring;
    }
    if ($this->ooint != 0) {
      return example1_aoneof::ooint;
    }
    return example1_aoneof::NONE;
  }
}

class ExampleServiceClient {
  public function __construct(private \Grpc\ClientConn $cc) {
  }

  public async function OneToTwo(\Grpc\Context $ctx, \foo\bar\example1 $in, \Grpc\CallOption ...$co): Awaitable<\foo\bar\example2> {
    $out = new \foo\bar\example2();
    await $this->cc->Invoke($ctx, '/foo.bar.ExampleService/OneToTwo', $in, $out, ...$co);
    return $out;
  }
}

interface ExampleServiceServer {
  public function OneToTwo(\Grpc\Context $ctx, \foo\bar\example1 $in): \foo\bar\example2;
}

function RegisterExampleServiceServer(\Grpc\Server $server, ExampleServiceServer $service): void {
  $methods = vec[];
  $handler = function(\Grpc\Context $ctx, \Grpc\DecoderFunc $df): \Protobuf\Message use ($service) {
    $in = new \foo\bar\example1();
    $df($in);
    return $service->OneToTwo($ctx, $in);
  };
  $methods []= new \Grpc\MethodDesc('OneToTwo', $handler);
  $server->RegisterService(new \Grpc\ServiceDesc('foo.bar.ExampleService', $methods));
}

class XXX_FileDescriptor_example1__proto implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'example1.proto';
  const string RAW = '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';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    return (string)\gzdeflate(\base64_decode(self::RAW));
  }
}
