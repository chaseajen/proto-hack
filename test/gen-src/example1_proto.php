<?hh // strict
namespace foo\bar;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: example1.proto

newtype XXX_AEnum1_t as int = int;
abstract class AEnum1 {
  const XXX_AEnum1_t A = 0;
  const XXX_AEnum1_t B = 2;
  private static dict<int, string> $XXX_itos = dict[
    0 => 'A',
    2 => 'B',
  ];
  public static function XXX_ItoS(): dict<int, string> {
    return self::$XXX_itos;
  }
  private static dict<string, int> $XXX_stoi = dict[
    'A' => 0,
    'B' => 2,
  ];
  public static function XXX_FromMixed(mixed $m): XXX_AEnum1_t {
    if (is_string($m)) return idx(self::$XXX_stoi, $m, is_numeric($m) ? ((int) $m) : 0);
    if (is_int($m)) return $m;
    return 0;
  }
  public static function XXX_FromInt(int $i): XXX_AEnum1_t {
    return $i;
  }
}

class example2 implements \Protobuf\Message {
  public int $aint32;

  public function __construct() {
    $this->aint32 = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->aint32 = $d->readVarint32Signed();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->aint32 !== 0) {
      $e->writeTag(1, 0);
      $e->writeVarint($this->aint32);
    }
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeInt32('aint32', 'aint32', $this->aint32, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'aint32':
          $this->aint32 = \Protobuf\Internal\JsonDecoder::readInt32Signed($v);
          break;
      }
    }
  }
}

newtype XXX_example1_AEnum2_t as int = int;
abstract class example1_AEnum2 {
  const XXX_example1_AEnum2_t C = 0;
  const XXX_example1_AEnum2_t D = 10;
  private static dict<int, string> $XXX_itos = dict[
    0 => 'C',
    10 => 'D',
  ];
  public static function XXX_ItoS(): dict<int, string> {
    return self::$XXX_itos;
  }
  private static dict<string, int> $XXX_stoi = dict[
    'C' => 0,
    'D' => 10,
  ];
  public static function XXX_FromMixed(mixed $m): XXX_example1_AEnum2_t {
    if (is_string($m)) return idx(self::$XXX_stoi, $m, is_numeric($m) ? ((int) $m) : 0);
    if (is_int($m)) return $m;
    return 0;
  }
  public static function XXX_FromInt(int $i): XXX_example1_AEnum2_t {
    return $i;
  }
}

newtype XXX_example1_aoneof_enum_t = int;
interface example1_aoneof {
  const XXX_example1_aoneof_enum_t XXX_NOT_SET = 0;
  const XXX_example1_aoneof_enum_t oostring = 60;
  const XXX_example1_aoneof_enum_t ooint = 61;
  public function WhichOneof(): XXX_example1_aoneof_enum_t;
  public function WriteTo(\Protobuf\Internal\Encoder $e): void;
  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void;
}

class XXX_example1_aoneof_NOT_SET implements example1_aoneof {
  public function WhichOneof(): XXX_example1_aoneof_enum_t {
    return self::XXX_NOT_SET;
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {}

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {}
}
class example1_oostring implements example1_aoneof {
  public function __construct(public string $oostring) {}

  public function WhichOneof(): XXX_example1_aoneof_enum_t {
    return self::oostring;
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(60, 2);;
    $e->writeString($this->oostring);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('oostring', 'oostring', $this->oostring, true);
  }
}

class example1_ooint implements example1_aoneof {
  public function __construct(public int $ooint) {}

  public function WhichOneof(): XXX_example1_aoneof_enum_t {
    return self::ooint;
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(61, 0);;
    $e->writeVarint($this->ooint);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeInt32('ooint', 'ooint', $this->ooint, true);
  }
}

class example1_example2 implements \Protobuf\Message {
  public string $astring;

  public function __construct() {
    $this->astring = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->astring = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->astring !== '') {
      $e->writeTag(1, 2);
      $e->writeString($this->astring);
    }
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('astring', 'astring', $this->astring, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'astring':
          $this->astring = \Protobuf\Internal\JsonDecoder::readString($v);
          break;
      }
    }
  }
}

class example1_AmapEntry implements \Protobuf\Message {
  public string $key;
  public string $value;

  public function __construct() {
    $this->key = '';
    $this->value = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->key = $d->readString();
          break;
        case 2:
          $this->value = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->key !== '') {
      $e->writeTag(1, 2);
      $e->writeString($this->key);
    }
    if ($this->value !== '') {
      $e->writeTag(2, 2);
      $e->writeString($this->value);
    }
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('key', 'key', $this->key, false);
    $e->writeString('value', 'value', $this->value, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'key':
          $this->key = \Protobuf\Internal\JsonDecoder::readString($v);
          break;
        case 'value':
          $this->value = \Protobuf\Internal\JsonDecoder::readString($v);
          break;
      }
    }
  }
}

class example1_Amap2Entry implements \Protobuf\Message {
  public string $key;
  public ?\fiz\baz\example2 $value;

  public function __construct() {
    $this->key = '';
    $this->value = null;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->key = $d->readString();
          break;
        case 2:
          if ($this->value == null) $this->value = new \fiz\baz\example2();
          $this->value->MergeFrom($d->readDecoder());
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->key !== '') {
      $e->writeTag(1, 2);
      $e->writeString($this->key);
    }
    $msg = $this->value;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 2);
    }
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('key', 'key', $this->key, false);
    $e->writeMessage('value', 'value', $this->value, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'key':
          $this->key = \Protobuf\Internal\JsonDecoder::readString($v);
          break;
        case 'value':
          if ($v === null) break;
          if ($this->value == null) $this->value = new \fiz\baz\example2();
          $this->value->MergeJsonFrom($v);
          break;
      }
    }
  }
}

class example1 implements \Protobuf\Message {
  public float $adouble;
  public float $afloat;
  public int $aint32;
  public int $aint64;
  public int $auint32;
  public int $auint64;
  public int $asint32;
  public int $asint64;
  public int $afixed32;
  public int $afixed64;
  public int $asfixed32;
  public int $asfixed64;
  public bool $abool;
  public string $astring;
  public string $abytes;
  public \foo\bar\XXX_AEnum1_t $aenum1;
  public \foo\bar\XXX_example1_AEnum2_t $aenum2;
  public \fiz\baz\XXX_AEnum2_t $aenum22;
  public vec<string> $manystring;
  public vec<int> $manyint64;
  public ?\foo\bar\example1_example2 $aexample2;
  public ?\foo\bar\example2 $aexample22;
  public ?\fiz\baz\example2 $aexample23;
  public dict<string, string> $amap;
  public dict<string, ?\fiz\baz\example2> $amap2;
  public int $outoforder;
  public ?\google\protobuf\Any $anany;
  public example1_aoneof $aoneof;

  public function __construct() {
    $this->adouble = 0.0;
    $this->afloat = 0.0;
    $this->aint32 = 0;
    $this->aint64 = 0;
    $this->auint32 = 0;
    $this->auint64 = 0;
    $this->asint32 = 0;
    $this->asint64 = 0;
    $this->afixed32 = 0;
    $this->afixed64 = 0;
    $this->asfixed32 = 0;
    $this->asfixed64 = 0;
    $this->abool = false;
    $this->astring = '';
    $this->abytes = '';
    $this->aenum1 = \foo\bar\AEnum1::XXX_FromInt(0);
    $this->aenum2 = \foo\bar\example1_AEnum2::XXX_FromInt(0);
    $this->aenum22 = \fiz\baz\AEnum2::XXX_FromInt(0);
    $this->manystring = vec[];
    $this->manyint64 = vec[];
    $this->aexample2 = null;
    $this->aexample22 = null;
    $this->aexample23 = null;
    $this->amap = dict[];
    $this->amap2 = dict[];
    $this->outoforder = 0;
    $this->anany = null;
    $this->aoneof = new XXX_example1_aoneof_NOT_SET();
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->adouble = $d->readDouble();
          break;
        case 2:
          $this->afloat = $d->readFloat();
          break;
        case 3:
          $this->aint32 = $d->readVarint32Signed();
          break;
        case 4:
          $this->aint64 = $d->readVarint();
          break;
        case 5:
          $this->auint32 = $d->readVarint32();
          break;
        case 6:
          $this->auint64 = $d->readVarint32();
          break;
        case 7:
          $this->asint32 = $d->readVarintZigZag32();
          break;
        case 8:
          $this->asint64 = $d->readVarintZigZag64();
          break;
        case 9:
          $this->afixed32 = $d->readLittleEndianInt32Unsigned();
          break;
        case 10:
          $this->afixed64 = $d->readLittleEndianInt64();
          break;
        case 11:
          $this->asfixed32 = $d->readLittleEndianInt32Signed();
          break;
        case 12:
          $this->asfixed64 = $d->readLittleEndianInt64();
          break;
        case 13:
          $this->abool = $d->readBool();
          break;
        case 14:
          $this->astring = $d->readString();
          break;
        case 15:
          $this->abytes = $d->readString();
          break;
        case 20:
          $this->aenum1 = \foo\bar\AEnum1::XXX_FromInt($d->readVarint());
          break;
        case 21:
          $this->aenum2 = \foo\bar\example1_AEnum2::XXX_FromInt($d->readVarint());
          break;
        case 22:
          $this->aenum22 = \fiz\baz\AEnum2::XXX_FromInt($d->readVarint());
          break;
        case 30:
          $this->manystring []= $d->readString();
          break;
        case 31:
          if ($wt == 2) {
            $packed = $d->readDecoder();
            while (!$packed->isEOF()) {
              $this->manyint64 []= $packed->readVarint();
            }
          } else {
            $this->manyint64 []= $d->readVarint();
          }
          break;
        case 40:
          if ($this->aexample2 == null) $this->aexample2 = new \foo\bar\example1_example2();
          $this->aexample2->MergeFrom($d->readDecoder());
          break;
        case 41:
          if ($this->aexample22 == null) $this->aexample22 = new \foo\bar\example2();
          $this->aexample22->MergeFrom($d->readDecoder());
          break;
        case 42:
          if ($this->aexample23 == null) $this->aexample23 = new \fiz\baz\example2();
          $this->aexample23->MergeFrom($d->readDecoder());
          break;
        case 49:
          $this->outoforder = $d->readVarint();
          break;
        case 51:
          $obj = new \foo\bar\example1_AmapEntry();
          $obj->MergeFrom($d->readDecoder());
          $this->amap[$obj->key] = $obj->value;
          break;
        case 52:
          $obj = new \foo\bar\example1_Amap2Entry();
          $obj->MergeFrom($d->readDecoder());
          $this->amap2[$obj->key] = $obj->value;
          break;
        case 60:
          $this->aoneof = new example1_oostring($d->readString());
          break;
        case 61:
          $this->aoneof = new example1_ooint($d->readVarint32Signed());
          break;
        case 80:
          if ($this->anany == null) $this->anany = new \google\protobuf\Any();
          $this->anany->MergeFrom($d->readDecoder());
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->adouble !== 0.0) {
      $e->writeTag(1, 1);
      $e->writeDouble($this->adouble);
    }
    if ($this->afloat !== 0.0) {
      $e->writeTag(2, 5);
      $e->writeFloat($this->afloat);
    }
    if ($this->aint32 !== 0) {
      $e->writeTag(3, 0);
      $e->writeVarint($this->aint32);
    }
    if ($this->aint64 !== 0) {
      $e->writeTag(4, 0);
      $e->writeVarint($this->aint64);
    }
    if ($this->auint32 !== 0) {
      $e->writeTag(5, 0);
      $e->writeVarint($this->auint32);
    }
    if ($this->auint64 !== 0) {
      $e->writeTag(6, 0);
      $e->writeVarint($this->auint64);
    }
    if ($this->asint32 !== 0) {
      $e->writeTag(7, 0);
      $e->writeVarintZigZag32($this->asint32);
    }
    if ($this->asint64 !== 0) {
      $e->writeTag(8, 0);
      $e->writeVarintZigZag64($this->asint64);
    }
    if ($this->afixed32 !== 0) {
      $e->writeTag(9, 5);
      $e->writeLittleEndianInt32Unsigned($this->afixed32);
    }
    if ($this->afixed64 !== 0) {
      $e->writeTag(10, 1);
      $e->writeLittleEndianInt64($this->afixed64);
    }
    if ($this->asfixed32 !== 0) {
      $e->writeTag(11, 5);
      $e->writeLittleEndianInt32Signed($this->asfixed32);
    }
    if ($this->asfixed64 !== 0) {
      $e->writeTag(12, 1);
      $e->writeLittleEndianInt64($this->asfixed64);
    }
    if ($this->abool !== false) {
      $e->writeTag(13, 0);
      $e->writeBool($this->abool);
    }
    if ($this->astring !== '') {
      $e->writeTag(14, 2);
      $e->writeString($this->astring);
    }
    if ($this->abytes !== '') {
      $e->writeTag(15, 2);
      $e->writeString($this->abytes);
    }
    if ($this->aenum1 !== \foo\bar\AEnum1::XXX_FromInt(0)) {
      $e->writeTag(20, 0);
      $e->writeVarint($this->aenum1);
    }
    if ($this->aenum2 !== \foo\bar\example1_AEnum2::XXX_FromInt(0)) {
      $e->writeTag(21, 0);
      $e->writeVarint($this->aenum2);
    }
    if ($this->aenum22 !== \fiz\baz\AEnum2::XXX_FromInt(0)) {
      $e->writeTag(22, 0);
      $e->writeVarint($this->aenum22);
    }
    foreach ($this->manystring as $elem) {
      $e->writeTag(30, 2);
      $e->writeString($elem);
    }
    $packed = new \Protobuf\Internal\Encoder();
    foreach ($this->manyint64 as $elem) {
      $packed->writeVarint($elem);
    }
    $e->writeEncoder($packed, 31);
    $msg = $this->aexample2;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 40);
    }
    $msg = $this->aexample22;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 41);
    }
    $msg = $this->aexample23;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 42);
    }
    if ($this->outoforder !== 0) {
      $e->writeTag(49, 0);
      $e->writeVarint($this->outoforder);
    }
    foreach ($this->amap as $k => $v) {
      $obj = new \foo\bar\example1_AmapEntry();
      $obj->key = $k;
      $obj->value = $v;
      $nested = new \Protobuf\Internal\Encoder();
      $obj->WriteTo($nested);
      $e->writeEncoder($nested, 51);
    }
    foreach ($this->amap2 as $k => $v) {
      $obj = new \foo\bar\example1_Amap2Entry();
      $obj->key = $k;
      $obj->value = $v;
      $nested = new \Protobuf\Internal\Encoder();
      $obj->WriteTo($nested);
      $e->writeEncoder($nested, 52);
    }
    $msg = $this->anany;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 80);
    }
    $this->aoneof->WriteTo($e);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeFloat('adouble', 'adouble', $this->adouble, false);
    $e->writeFloat('afloat', 'afloat', $this->afloat, false);
    $e->writeInt32('aint32', 'aint32', $this->aint32, false);
    $e->writeInt64Signed('aint64', 'aint64', $this->aint64, false);
    $e->writeInt32('auint32', 'auint32', $this->auint32, false);
    $e->writeInt32('auint64', 'auint64', $this->auint64, false);
    $e->writeInt32('asint32', 'asint32', $this->asint32, false);
    $e->writeInt64Signed('asint64', 'asint64', $this->asint64, false);
    $e->writeInt32('afixed32', 'afixed32', $this->afixed32, false);
    $e->writeInt64Unsigned('afixed64', 'afixed64', $this->afixed64, false);
    $e->writeInt32('asfixed32', 'asfixed32', $this->asfixed32, false);
    $e->writeInt64Signed('asfixed64', 'asfixed64', $this->asfixed64, false);
    $e->writeBool('abool', 'abool', $this->abool, false);
    $e->writeString('astring', 'astring', $this->astring, false);
    $e->writeBytes('abytes', 'abytes', $this->abytes, false);
    $e->writeEnum('aenum1', 'aenum1', \foo\bar\AEnum1::XXX_ItoS(), $this->aenum1, false);
    $e->writeEnum('aenum2', 'aenum2', \foo\bar\example1_AEnum2::XXX_ItoS(), $this->aenum2, false);
    $e->writeEnum('aenum22', 'aenum22', \fiz\baz\AEnum2::XXX_ItoS(), $this->aenum22, false);
    $e->writePrimitiveList('manystring', 'manystring', $this->manystring);
    $e->writeInt64SignedList('manyint64', 'manyint64', $this->manyint64);
    $e->writeMessage('aexample2', 'aexample2', $this->aexample2, false);
    $e->writeMessage('aexample22', 'aexample22', $this->aexample22, false);
    $e->writeMessage('aexample23', 'aexample23', $this->aexample23, false);
    $e->writeInt64Signed('outoforder', 'outoforder', $this->outoforder, false);
    $e->writePrimitiveMap('amap', 'amap', $this->amap);
    $e->writeMessageMap('amap2', 'amap2', $this->amap2);
    $e->writeMessage('anany', 'anany', $this->anany, false);
    $this->aoneof->WriteJsonTo($e);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'adouble':
          $this->adouble = \Protobuf\Internal\JsonDecoder::readFloat($v);
          break;
        case 'afloat':
          $this->afloat = \Protobuf\Internal\JsonDecoder::readFloat($v);
          break;
        case 'aint32':
          $this->aint32 = \Protobuf\Internal\JsonDecoder::readInt32Signed($v);
          break;
        case 'aint64':
          $this->aint64 = \Protobuf\Internal\JsonDecoder::readInt64Signed($v);
          break;
        case 'auint32':
          $this->auint32 = \Protobuf\Internal\JsonDecoder::readInt32Unsigned($v);
          break;
        case 'auint64':
          $this->auint64 = \Protobuf\Internal\JsonDecoder::readInt32Unsigned($v);
          break;
        case 'asint32':
          $this->asint32 = \Protobuf\Internal\JsonDecoder::readInt32Signed($v);
          break;
        case 'asint64':
          $this->asint64 = \Protobuf\Internal\JsonDecoder::readInt64Signed($v);
          break;
        case 'afixed32':
          $this->afixed32 = \Protobuf\Internal\JsonDecoder::readInt32Signed($v);
          break;
        case 'afixed64':
          $this->afixed64 = \Protobuf\Internal\JsonDecoder::readInt64Unsigned($v);
          break;
        case 'asfixed32':
          $this->asfixed32 = \Protobuf\Internal\JsonDecoder::readInt32Signed($v);
          break;
        case 'asfixed64':
          $this->asfixed64 = \Protobuf\Internal\JsonDecoder::readInt64Signed($v);
          break;
        case 'abool':
          $this->abool = \Protobuf\Internal\JsonDecoder::readBool($v);
          break;
        case 'astring':
          $this->astring = \Protobuf\Internal\JsonDecoder::readString($v);
          break;
        case 'abytes':
          $this->abytes = \Protobuf\Internal\JsonDecoder::readBytes($v);
          break;
        case 'aenum1':
          $this->aenum1 = \foo\bar\AEnum1::XXX_FromMixed($v);
          break;
        case 'aenum2':
          $this->aenum2 = \foo\bar\example1_AEnum2::XXX_FromMixed($v);
          break;
        case 'aenum22':
          $this->aenum22 = \fiz\baz\AEnum2::XXX_FromMixed($v);
          break;
        case 'manystring':
          foreach(\Protobuf\Internal\JsonDecoder::readList($v) as $vv) {
            $this->manystring []= \Protobuf\Internal\JsonDecoder::readString($vv);
          }
          break;
        case 'manyint64':
          foreach(\Protobuf\Internal\JsonDecoder::readList($v) as $vv) {
            $this->manyint64 []= \Protobuf\Internal\JsonDecoder::readInt64Signed($vv);
          }
          break;
        case 'aexample2':
          if ($v === null) break;
          if ($this->aexample2 == null) $this->aexample2 = new \foo\bar\example1_example2();
          $this->aexample2->MergeJsonFrom($v);
          break;
        case 'aexample22':
          if ($v === null) break;
          if ($this->aexample22 == null) $this->aexample22 = new \foo\bar\example2();
          $this->aexample22->MergeJsonFrom($v);
          break;
        case 'aexample23':
          if ($v === null) break;
          if ($this->aexample23 == null) $this->aexample23 = new \fiz\baz\example2();
          $this->aexample23->MergeJsonFrom($v);
          break;
        case 'outoforder':
          $this->outoforder = \Protobuf\Internal\JsonDecoder::readInt64Signed($v);
          break;
        case 'amap':
          if ($v !== null) {
            foreach (\Protobuf\Internal\JsonDecoder::readObject($v) as $k => $v) {
              $this->amap[\Protobuf\Internal\JsonDecoder::readString($k)] = \Protobuf\Internal\JsonDecoder::readString($v);
            }
          }
          break;
        case 'amap2':
          if ($v !== null) {
            foreach (\Protobuf\Internal\JsonDecoder::readObject($v) as $k => $v) {
              $obj = new \fiz\baz\example2();
              $obj->MergeJsonFrom($v);
              $this->amap2[\Protobuf\Internal\JsonDecoder::readString($k)] = $obj;
            }
          }
          break;
        case 'oostring':
          $this->aoneof = new example1_oostring(\Protobuf\Internal\JsonDecoder::readString($v));
          break;
        case 'ooint':
          $this->aoneof = new example1_ooint(\Protobuf\Internal\JsonDecoder::readInt32Signed($v));
          break;
        case 'anany':
          if ($v === null) break;
          if ($this->anany == null) $this->anany = new \google\protobuf\Any();
          $this->anany->MergeJsonFrom($v);
          break;
      }
    }
  }
}

class ExampleServiceClient {
  public function __construct(private \Grpc\ClientConn $cc) {
  }

  public async function OneToTwo(\Grpc\Context $ctx, \foo\bar\example1 $in, \Grpc\CallOption ...$co): Awaitable<\foo\bar\example2> {
    $out = new \foo\bar\example2();
    await $this->cc->Invoke($ctx, '/foo.bar.ExampleService/OneToTwo', $in, $out, ...$co);
    return $out;
  }
}

interface ExampleServiceServer {
  public function OneToTwo(\Grpc\Context $ctx, \foo\bar\example1 $in): \foo\bar\example2;
}

function RegisterExampleServiceServer(\Grpc\Server $server, ExampleServiceServer $service): void {
  $methods = vec[];
  $handler = function(\Grpc\Context $ctx, \Grpc\DecoderFunc $df): \Protobuf\Message use ($service) {
    $in = new \foo\bar\example1();
    $df($in);
    return $service->OneToTwo($ctx, $in);
  };
  $methods []= new \Grpc\MethodDesc('OneToTwo', $handler);
  $server->RegisterService(new \Grpc\ServiceDesc('foo.bar.ExampleService', $methods));
}

class XXX_FileDescriptor_example1__proto implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'example1.proto';
  const string RAW =
  'eNpsVFFP2zwUrVvaJhcoxeKr/GWIWdUkDA9hcasOTdsDDCSkPWzy+APOcFG1Nq5Cyij/aP'
  .'9yih0nYfQpOeeec2PfHBt66kkulnMVhctUZxp3p1qHsUyD/++1vp+rM0PHq+mZTNZWEzgP'
  .'t3g4BM8xeAAdOUuyESeIItYWBRr+8UtRhAl05Z1exXNlVEg4aOzTuZYZaVLEmqJAtbatel'
  .'vHT8ZkiyLWEgUyX1hZQ5sitiscLCuTMenUKoXnwXq6FLF94WBZmYyJRxHDwkEcgCensyd1'
  .'N+LEp4h1RYmr2mRMgCLWESXGh+DLB2fcpojtiYqoVSdjskMR64uKwAfQlrHWc7JLEfOEBX'
  .'aNWTpL7kmPIuYLB82M4nWmHsgeRWxHFAgfQ0eqZLWIyAFFrMf3wuLfhxfXOS2KMn5fCDn5'
  .'zwhJKSzDYxy8cHB8Al37xsnA9Z49h7F8dkpXx0cAC5msi6Uf0RbzRY3JZ5EjO/23tMVaoi'
  .'LwOfjSZY8witg2D16vzilEJcYRQAk4OTHW/X+tXNRELywjcuosxcY2WEb4DLbkQi7JiLbY'
  .'Nn+zYXALubxOsnQtjBBzaOdPTsbGcbjZwa3FSvMR6lWmpzq9UymJzEGoMfgQPK2LAX/Ks3'
  .'HTECWDB9DWepZk5HN+sm4awkJ8Cm2ZyGRNvpuNHoT2QgjdhRBeJPkKcknwrnYD1IKIXgQx'
  .'+AB+uV3ch9YvtS4k+Wue60c5Xylz9H1hwcfmOQq+AlS73uA8rjs3/pOq2XAAHZtB3Ab0pd'
  .'/IH1d9uPSgI3Wi9PTUKaK8dGEVl/0mv4LetW34Q6WPs58Kc/C+JepW3/7W+FV4ouB1noaN'
  .'uGMGOPobAAD//28jews';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    return (string)\gzuncompress(\base64_decode(self::RAW));
  }
}
