<?hh // strict

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: example4.proto

class pb_Class implements \Protobuf\Message {
  public string $name;

  public function __construct() {
    $this->name = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->name = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->name !== '') {
      $e->writeTag(1, 2);
      $e->writeString($this->name);
    }
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('name', 'name', $this->name, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'name':
          $this->name = \Protobuf\Internal\JsonDecoder::readString($v);
          break;
      }
    }
  }
}

class pb_Interface implements \Protobuf\Message {
  public ?\pb_Class $class;

  public function __construct() {
    $this->class = null;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          if ($this->class == null) $this->class = new \pb_Class();
          $this->class->MergeFrom($d->readDecoder());
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $msg = $this->class;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 1);
    }
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeMessage('class', 'class', $this->class, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'class':
          if ($v === null) break;
          if ($this->class == null) $this->class = new \pb_Class();
          $this->class->MergeJsonFrom($v);
          break;
      }
    }
  }
}

class NotClass implements \Protobuf\Message {
  public string $name;

  public function __construct() {
    $this->name = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->name = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->name !== '') {
      $e->writeTag(1, 2);
      $e->writeString($this->name);
    }
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('name', 'name', $this->name, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'name':
          $this->name = \Protobuf\Internal\JsonDecoder::readString($v);
          break;
      }
    }
  }
}


class XXX_FileDescriptor_example4__proto implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'example4.proto';
  const string RAW = 'eNp00b9OwzAQBnDf+Rzsa1yaY0Hij6pOsHQovAETDAx5g9CaqW2qJALejldDviYjW77c+afPMs/TT3M47dPz+tS1Q7u6Yfeyb/pehOnYHNI1LOEh1Pq9euTwehxS99lsk9yy2+ZN3ZhtirWeq88/V/fs39vhX+rtF7kQMmYO7BlKscYI3zGSESJTwKZa1qlP3VfaLb/bbtevmZktGRBLPvKMiQwasQ6FI7scSMghXXJ5ji4P/ZRArAtxSlasW1TMjARC3jCoDiDW+0p1yHoYdVA9oL9SAdAUeXgxJRAbfJySFRtGHYXKfMmsI4gt/UJ1zHocdVQ9YikqoHaPY3dUPY7dUfW4qD4KfbCnvwAAAP//QzgxnQ';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    return (string)\gzuncompress(\base64_decode(self::RAW));
  }
}
