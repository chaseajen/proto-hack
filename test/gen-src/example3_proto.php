<?hh // strict

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: example3.proto

class Donkey implements \Protobuf\Message {
  public string $hi;

  public function __construct() {
    $this->hi = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->hi = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->hi !== '') {
      $e->writeTag(1, 2);
      $e->writeString($this->hi);
    }
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('hi', 'hi', $this->hi, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'hi':
          $this->hi = \Protobuf\Internal\JsonDecoder::readString($v);
          break;
      }
    }
  }
}

class Funky_Monkey implements \Protobuf\Message {
  public string $hi;

  public function __construct() {
    $this->hi = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->hi = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->hi !== '') {
      $e->writeTag(1, 2);
      $e->writeString($this->hi);
    }
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeString('hi', 'hi', $this->hi, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'hi':
          $this->hi = \Protobuf\Internal\JsonDecoder::readString($v);
          break;
      }
    }
  }
}

class Funky implements \Protobuf\Message {
  public ?\Funky_Monkey $monkey;
  public ?\Donkey $dokey;

  public function __construct() {
    $this->monkey = null;
    $this->dokey = null;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          if ($this->monkey == null) $this->monkey = new \Funky_Monkey();
          $this->monkey->MergeFrom($d->readDecoder());
          break;
        case 2:
          if ($this->dokey == null) $this->dokey = new \Donkey();
          $this->dokey->MergeFrom($d->readDecoder());
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $msg = $this->monkey;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 1);
    }
    $msg = $this->dokey;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 2);
    }
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeMessage('monkey', 'monkey', $this->monkey, false);
    $e->writeMessage('dokey', 'dokey', $this->dokey, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'monkey':
          if ($v === null) break;
          if ($this->monkey == null) $this->monkey = new \Funky_Monkey();
          $this->monkey->MergeJsonFrom($v);
          break;
        case 'dokey':
          if ($v === null) break;
          if ($this->dokey == null) $this->dokey = new \Donkey();
          $this->dokey->MergeJsonFrom($v);
          break;
      }
    }
  }
}


class XXX_FileDescriptor_example3__proto implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'example3.proto';
  const string RAW =
  'eNpskkFLw0AQhXd2JpvN2yRtpz0UQZCC4CkH+xfEg9BL/4FisaW2KaJgb/502U1iLx6/eS'
  .'/fYyGoN9/Ph9P7ZtmcPtrPdjGHe2iP+81Za9jtbk43dFes7Xa3eEP2+HXcn/UW7pAqKQz3'
  .'VZPuzSod132o18he29iyqZU3nXfdXa/mcKt/h55+GE7FmJLgQaWyMQrAilGxRggAiyFl62'
  .'sEiBhrlNmOUSGLICps7Rhlh1kM/UCkzEUYiJW5HiU7qbi4Ge1Eys5XKCFCbFRyW3D6hjga'
  .'csQxFylue1GMkHcoKl5yRT0csljAhUnZh+rCrOzHk/QSijbYWXoJJRf+lq1xMfQDkTKK0U'
  .'CsDJ32FlIOdtpbSFSCxaxvkovhYIkvDUU9ECuHib649DMsfwMAAP//Mj0z+g';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    return (string)\gzuncompress(\base64_decode(self::RAW));
  }
}
