<?hh // strict
namespace google\protobuf;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: wrappers.proto

class DoubleValue implements \Protobuf\Message {
  public float $value;

  public function __construct() {
    $this->value = 0.0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readDouble();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 1);
    $e->writeDouble($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readFloat($m);
  }
}

class FloatValue implements \Protobuf\Message {
  public float $value;

  public function __construct() {
    $this->value = 0.0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readFloat();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 5);
    $e->writeFloat($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readFloat($m);
  }
}

class Int64Value implements \Protobuf\Message {
  public int $value;

  public function __construct() {
    $this->value = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding(\sprintf('%d', $this->value));
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt64Signed($m);
  }
}

class UInt64Value implements \Protobuf\Message {
  public int $value;

  public function __construct() {
    $this->value = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding(\sprintf('%u', $this->value));
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt64Unsigned($m);
  }
}

class Int32Value implements \Protobuf\Message {
  public int $value;

  public function __construct() {
    $this->value = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint32Signed();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt32Signed($m);
  }
}

class UInt32Value implements \Protobuf\Message {
  public int $value;

  public function __construct() {
    $this->value = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint32();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt32Unsigned($m);
  }
}

class BoolValue implements \Protobuf\Message {
  public bool $value;

  public function __construct() {
    $this->value = false;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readBool();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeBool($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readBool($m);
  }
}

class StringValue implements \Protobuf\Message {
  public string $value;

  public function __construct() {
    $this->value = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 2);
    $e->writeString($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readString($m);
  }
}

class BytesValue implements \Protobuf\Message {
  public string $value;

  public function __construct() {
    $this->value = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 2);
    $e->writeString($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding(\Protobuf\Internal\JsonEncoder::encodeBytes($this->value));
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readBytes($m);
  }
}


class XXX_FileDescriptor_wrappers__proto implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'wrappers.proto';
  const string RAW =
  'eNri4isvSiwoSC0q1isoyi/JF+JPz89Pz0mF8JJK05SUubhd8kuTclLDEnNKU4VEuFjLQA'
  .'wJRgVGDcYgCEdJiYvLLSc/sQSLGiYkNZ55JWYmWNQww9Qoc3GH4lLEgmqQsREWNaxoBmFV'
  .'xAtTpMjF6ZSfn4NFCQeSOcElRZl56VgUcSI5yKmyJLUYixoeqBqnGi7h5PxcPbTQdeINhw'
  .'Z/AEgkgDFKKz2zJKM0SS85P1c/PT8nMS9dH6ZYv6CksiC1WB8WYz8YGRcxMbsHOK1iknOH'
  .'mBsAVaoXnpqT452XX54XAtKSxAY2wxgQAAD//zHDkpA';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    return (string)\gzuncompress(\base64_decode(self::RAW));
  }
}
