<?hh // strict
namespace google\protobuf;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: wrappers.proto

class DoubleValue implements \Protobuf\Message {
  public float $value;

  public function __construct() {
    $this->value = 0.0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()) {
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readDouble();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 1);
    $e->writeDouble($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readFloat($m);
  }
}

class FloatValue implements \Protobuf\Message {
  public float $value;

  public function __construct() {
    $this->value = 0.0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()) {
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readFloat();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 5);
    $e->writeFloat($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readFloat($m);
  }
}

class Int64Value implements \Protobuf\Message {
  public int $value;

  public function __construct() {
    $this->value = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()) {
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding(\sprintf('%d', $this->value));
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt64Signed($m);
  }
}

class UInt64Value implements \Protobuf\Message {
  public int $value;

  public function __construct() {
    $this->value = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()) {
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding(\sprintf('%u', $this->value));
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt64Unsigned($m);
  }
}

class Int32Value implements \Protobuf\Message {
  public int $value;

  public function __construct() {
    $this->value = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()) {
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint32Signed();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt32Signed($m);
  }
}

class UInt32Value implements \Protobuf\Message {
  public int $value;

  public function __construct() {
    $this->value = 0;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()) {
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint32();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt32Unsigned($m);
  }
}

class BoolValue implements \Protobuf\Message {
  public bool $value;

  public function __construct() {
    $this->value = false;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()) {
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readBool();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeBool($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readBool($m);
  }
}

class StringValue implements \Protobuf\Message {
  public string $value;

  public function __construct() {
    $this->value = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()) {
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 2);
    $e->writeString($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readString($m);
  }
}

class BytesValue implements \Protobuf\Message {
  public string $value;

  public function __construct() {
    $this->value = '';
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()) {
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readString();
          break;
        default:
          $d->skipWireType($wt);
      }
    }
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 2);
    $e->writeString($this->value);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding(
      \Protobuf\Internal\JsonEncoder::encodeBytes($this->value),
    );
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readBytes($m);
  }
}


class XXX_FileDescriptor_wrappers__proto
  implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'wrappers.proto';
  const string
    RAW =
      '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';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    return (string)\gzuncompress(\base64_decode(self::RAW));
  }
}
